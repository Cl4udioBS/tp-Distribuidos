# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comunicacao_pb2 as comunicacao__pb2


class ComunicarStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ComInterativa = channel.stream_stream(
                '/comunicacao.Comunicar/ComInterativa',
                request_serializer=comunicacao__pb2.MsgRequest.SerializeToString,
                response_deserializer=comunicacao__pb2.MsgReply.FromString,
                )


class ComunicarServicer(object):
    """The greeting service definition.
    """

    def ComInterativa(self, request_iterator, context):
        """Comunicação dupla
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComunicarServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ComInterativa': grpc.stream_stream_rpc_method_handler(
                    servicer.ComInterativa,
                    request_deserializer=comunicacao__pb2.MsgRequest.FromString,
                    response_serializer=comunicacao__pb2.MsgReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comunicacao.Comunicar', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Comunicar(object):
    """The greeting service definition.
    """

    @staticmethod
    def ComInterativa(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/comunicacao.Comunicar/ComInterativa',
            comunicacao__pb2.MsgRequest.SerializeToString,
            comunicacao__pb2.MsgReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
